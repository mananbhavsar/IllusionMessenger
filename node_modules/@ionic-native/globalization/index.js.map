{"version":3,"sources":["../../../src/@ionic-native/plugins/globalization/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name Globalization\n * @description\n * This plugin obtains information and performs operations specific to the user's locale, language, and timezone.\n *\n * @deprecated\n * With the [ECMA Internationalization API](https://www.ecma-international.org/ecma-402/1.0/) now supported on iOS, Android and Windows devices, this plugin is not required any more.\n * Migrating from this plugin to the [ECMA Internationalization API](https://www.ecma-international.org/ecma-402/1.0/) is explained in this [Cordova blog post](https://cordova.apache.org/news/2017/11/20/migrate-from-cordova-globalization-plugin.html).\n *\n * @usage\n * ```typescript\n * import { Globalization } from '@ionic-native/globalization';\n *\n * constructor(private globalization: Globalization) { }\n *\n *\n * ...\n *\n *\n * this.globalization.getPreferredLanguage()\n *   .then(res => console.log(res))\n *   .catch(e => console.log(e));\n *\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Globalization',\n  plugin: 'cordova-plugin-globalization',\n  pluginRef: 'navigator.globalization',\n  repo: 'https://github.com/apache/cordova-plugin-globalization',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class Globalization extends IonicNativePlugin {\n\n  /**\n   * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.\n   * @returns {Promise<{value: string}>}\n   */\n  @Cordova()\n  getPreferredLanguage(): Promise<{ value: string }> { return; }\n\n  /**\n   * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.\n   * @returns {Promise<{value: string}>}\n   */\n  @Cordova()\n  getLocaleName(): Promise<{ value: string }> { return; }\n\n  /**\n   * Converts date to string\n   * @param {Date} date Date you wish to convert\n   * @param options Options for the converted date. Length, selector.\n   * @returns {Promise<{value: string}>} Returns a promise when the date has been converted.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  dateToString(date: Date, options: { formatLength: string, selector: string }): Promise<{ value: string }> { return; }\n\n  /**\n   * Parses a date formatted as a string, according to the client's user preferences and calendar using the time zone of the client, and returns the corresponding date object.\n   * @param {string} dateString Date as a string to be converted\n   * @param options Options for the converted date. Length, selector.\n   * @returns {Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }>} Returns a promise when the date has been converted.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  stringToDate(dateString: string, options: { formatLength: string, selector: string }): Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }> { return; }\n\n  /**\n   * Returns a pattern string to format and parse dates according to the client's user preferences.\n   * @param options Object with the format length and selector\n   * @returns {Promise<{ pattern: string, timezone: string, utf_offset: number, dst_offset: number }>} Returns a promise.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getDatePattern(options: { formatLength: string, selector: string }): Promise<{ pattern: string, timezone: string, utf_offset: number, dst_offset: number }> { return; }\n\n  /**\n   * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.\n   * @param options Object with type (narrow or wide) and item (month or days).\n   * @returns {Promise<{value: Array<string>}>} Returns a promise.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getDateNames(options: { type: string, item: string }): Promise<{ value: Array<string> }> { return; }\n\n  /**\n   * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.\n   * @param {data} date Date to process\n   * @returns {Promise<{dst: string}>} reutrns a promise with the value\n   */\n  @Cordova()\n  isDayLightSavingsTime(date: Date): Promise<{ dst: string }> { return; }\n\n  /**\n   * Returns the first day of the week according to the client's user preferences and calendar.\n   * @returns {Promise<{value: string}>} returns a promise with the value\n   */\n  @Cordova()\n  getFirstDayOfWeek(): Promise<{ value: string }> { return; }\n\n  /**\n   * Returns a number formatted as a string according to the client's user preferences.\n   * @param numberToConvert {Number} The number to convert\n   * @param options {Object} Object with property `type` that can be set to: decimal, percent, or currency.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  numberToString(numberToConvert: number, options: { type: string }): Promise<{ value: string }> { return; }\n\n  /**\n   *\n   * @param {string} stringToConvert String you want to conver to a number\n   * @param options  The type of number you want to return. Can be decimal, percent, or currency.\n   * @returns {Promise<{ value: number | string }>} Returns a promise with the value.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  stringToNumber(stringToConvert: string, options: { type: string }): Promise<{ value: number | string }> { return; }\n\n  /**\n   * Returns a pattern string to format and parse numbers according to the client's user preferences.\n   * @param options Can be decimal, percent, or currency.\n   * @returns {Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getNumberPattern(options: { type: string }): Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }> { return; }\n\n  /**\n   * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.\n   * @param {string} currencyCode Currency Code.A\n   * @returns {Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }>}\n   */\n  @Cordova()\n  getCurrencyPattern(currencyCode: string): Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}