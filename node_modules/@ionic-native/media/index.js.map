{"version":3,"sources":["../../../src/@ionic-native/plugins/media/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CordovaInstance, Plugin, checkAvailability, IonicNativePlugin, InstanceProperty } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MediaObject {\r\n\r\n  /**\r\n   * An observable that notifies you on actions success\r\n   */\r\n  onSuccess: Observable<any>;\r\n\r\n  /**\r\n   * An observable that notifies you when an error occurs\r\n   */\r\n  onError: Observable<MEDIA_ERROR>;\r\n\r\n  /**\r\n   * An observable that notifies you when the file status changes\r\n   */\r\n  onStatusUpdate: Observable<MEDIA_STATUS>;\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  @InstanceProperty\r\n  successCallback: Function;\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  @InstanceProperty\r\n  errorCallback: Function;\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  @InstanceProperty\r\n  statusCallback: Function;\r\n\r\n  constructor(private _objectInstance: any) {\r\n    this.onSuccess = new Observable<any>((observer: Observer<any>) => {\r\n      this.successCallback = observer.next.bind(observer);\r\n      return () => this.successCallback = () => {};\r\n    });\r\n\r\n    this.onError = new Observable<MEDIA_ERROR>((observer: Observer<MEDIA_ERROR>) => {\r\n      this.errorCallback = observer.next.bind(observer);\r\n      return () => this.errorCallback = () => {};\r\n    });\r\n\r\n    this.onStatusUpdate = new Observable<MEDIA_STATUS>((observer: Observer<MEDIA_STATUS>) => {\r\n      this.statusCallback = observer.next.bind(observer);\r\n      return () => this.statusCallback = () => {};\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the current amplitude of the current recording.\r\n   * @returns {Promise<any>} Returns a promise with the amplitude of the current recording\r\n   */\r\n  @CordovaInstance()\r\n  getCurrentAmplitude(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get the current position within an audio file. Also updates the Media object's position parameter.\r\n   * @returns {Promise<any>} Returns a promise with the position of the current recording\r\n   */\r\n  @CordovaInstance()\r\n  getCurrentPosition(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.\r\n   * @returns {number} Returns a promise with the duration of the current recording\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  getDuration(): number { return; }\r\n\r\n  /**\r\n   * Starts or resumes playing an audio file.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  play(iosOptions?: {\r\n    numberOfLoops?: number,\r\n    playAudioWhenScreenIsLocked?: boolean\r\n  }): void { }\r\n\r\n  /**\r\n   * Pauses playing an audio file.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  pause(): void { }\r\n\r\n  /**\r\n   * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  release(): void { }\r\n\r\n  /**\r\n   * Sets the current position within an audio file.\r\n   * @param {number} milliseconds The time position you want to set for the current audio file\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  seekTo(milliseconds: number): void { }\r\n\r\n  /**\r\n   * Set the volume for an audio file.\r\n   * @param volume {number} The volume to set for playback. The value must be within the range of 0.0 to 1.0.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  setVolume(volume: number): void { }\r\n\r\n  @CordovaInstance({ sync: true })\r\n  setRate(speedRate: number): void {}\r\n\r\n  /**\r\n   * Starts recording an audio file.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  startRecord(): void { }\r\n\r\n  /**\r\n   * Stops recording\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  stopRecord(): void { }\r\n\r\n  /**\r\n   * Pauses recording\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  pauseRecord(): void { }\r\n\r\n  /**\r\n   * Resumes recording\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  resumeRecord(): void { }\r\n\r\n  /**\r\n   * Stops playing an audio file.\r\n   */\r\n  @CordovaInstance({ sync: true })\r\n  stop(): void { }\r\n\r\n}\r\n\r\nexport type MediaStatusUpdateCallback = (statusCode: number) => void;\r\n\r\nexport interface MediaError {\r\n\r\n  /**\r\n   * Error message\r\n   */\r\n  message: string;\r\n\r\n  /**\r\n   * Error code\r\n   */\r\n  code: number;\r\n\r\n}\r\n\r\nexport enum MEDIA_STATUS {\r\n  NONE = 0,\r\n  STARTING,\r\n  RUNNING,\r\n  PAUSED,\r\n  STOPPED\r\n}\r\n\r\nexport enum MEDIA_ERROR {\r\n  ABORTED = 1,\r\n  NETWORK,\r\n  DECODE,\r\n  SUPPORTED\r\n}\r\n\r\nexport type MediaErrorCallback = (error: MediaError) => void;\r\n\r\n/**\r\n * @name Media\r\n * @description\r\n * This plugin provides the ability to record and play back audio files on a device.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Media, MediaObject } from '@ionic-native/media';\r\n *\r\n *\r\n * constructor(private media: Media) { }\r\n *\r\n *\r\n * ...\r\n *\r\n *\r\n * // Create a Media instance.  Expects path to file or url as argument\r\n * // We can optionally pass a second argument to track the status of the media\r\n *\r\n * const file: MediaObject = this.media.create('file.mp3');\r\n *\r\n * // to listen to plugin events:\r\n *\r\n * file.onStatusUpdate.subscribe(status => console.log(status)); // fires when file status changes\r\n *\r\n * file.onSuccess.subscribe(() => console.log('Action is successful'));\r\n *\r\n * file.onError.subscribe(error => console.log('Error!', error));\r\n *\r\n * // play the file\r\n * file.play();\r\n *\r\n * // pause the file\r\n * file.pause();\r\n *\r\n * // get current playback position\r\n * file.getCurrentPosition().then((position) => {\r\n *   console.log(position);\r\n * });\r\n *\r\n * // get file duration\r\n * let duration = file.getDuration();\r\n * console.log(duration);\r\n *\r\n * // skip to 10 seconds (expects int value in ms)\r\n * file.seekTo(10000);\r\n *\r\n * // stop playing the file\r\n * file.stop();\r\n *\r\n * // release the native audio resource\r\n * // Platform Quirks:\r\n * // iOS simply create a new instance and the old one will be overwritten\r\n * // Android you must call release() to destroy instances of media when you are done\r\n * file.release();\r\n *\r\n *\r\n *\r\n * // Recording to a file\r\n * const file: MediaObject = this.media.create('path/to/file.mp3');\r\n *\r\n * file.startRecord();\r\n *\r\n * file.stopRecord();\r\n *\r\n *\r\n * ```\r\n *\r\n * Some hints if you are using iOS and recording doesn't work:\r\n * 1.) Try to use a absolute file path but remove beginning \"file://\".\r\n * Then it looks like: `/var/mobile/Containers/Data/Application/AF438B8B-7724-4FBB-8E69-083463224FC4/tmp/my_file.m4a`\r\n * Example: `this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a')`\r\n * 2.) If that's not working, too, create the file before using.\r\n * Example:\r\n * ```typescript\r\n * import { Media, MediaObject } from '@ionic-native/media';\r\n * import { File } from '@ionic-native/file';\r\n *\r\n * ...\r\n *\r\n * constructor(private media: Media, private file: File) { }\r\n *\r\n * ...\r\n *\r\n * this.file.createFile(this.file.tempDirectory, 'my_file.m4a', true).then(() => {\r\n *   let file = this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a');\r\n *   file.startRecord();\r\n *   window.setTimeout(() => file.stopRecord(), 10000);\r\n * });\r\n * ```\r\n *\r\n * You can find the reasons here: https://github.com/ionic-team/ionic-native/issues/1452#issuecomment-299605906\r\n * @classes\r\n * MediaObject\r\n * @interfaces\r\n * MediaError\r\n */\r\n@Plugin({\r\n  pluginName: 'Media',\r\n  repo: 'https://github.com/apache/cordova-plugin-media',\r\n  plugin: 'cordova-plugin-media',\r\n  pluginRef: 'Media',\r\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'Tizen', 'Ubuntu', 'Windows', 'Windows Phone']\r\n})\r\n\r\nexport class Media extends IonicNativePlugin {\r\n\r\n  // Constants\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_NONE: number = 0;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_STARTING: number = 1;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_RUNNING: number = 2;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_PAUSED: number = 3;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_STOPPED: number = 4;\r\n\r\n  // error codes\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_ERR_ABORTED: number = 1;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_ERR_NETWORK: number = 2;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_ERR_DECODE: number = 3;\r\n  /**\r\n   * @hidden\r\n   */\r\n  MEDIA_ERR_NONE_SUPPORTED: number = 4;\r\n\r\n  /**\r\n   * Open a media file\r\n   * @param src {string} A URI containing the audio content.\r\n   * @return {MediaObject}\r\n   */\r\n  create(src: string): MediaObject {\r\n    let instance: any;\r\n\r\n    if (checkAvailability(Media.getPluginRef(), null, Media.getPluginName()) === true) {\r\n      // Creates a new media object\r\n      instance = new (Media.getPlugin())(src);\r\n    }\r\n\r\n    return new MediaObject(instance);\r\n  }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}