{"version":3,"sources":["../../../src/@ionic-native/plugins/video-capture-plus/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAiGxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AASH;IAAsC,oCAAiB;IAAvD;;IAkBA,CAAC;IAhBC;;;;OAIG;IAIH,uCAAY,GAAZ,UAAa,OAAiC,IAA0B,MAAM,CAAC,CAAC,CAAC;IAE5E,2BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,+BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAPA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;wDAC+E;IAVtE,gBAAgB;QAR5B,MAAM,CAAC;YACN,UAAU,EAAE,kBAAkB;YAC9B,MAAM,EAAE,mCAAmC;YAC3C,SAAS,EAAE,iCAAiC;YAC5C,IAAI,EAAE,iEAAiE;YACvE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,gBAAgB,CAkB5B;IAAD,uBAAC;CAlBD,AAkBC,CAlBqC,iBAAiB,GAkBtD;SAlBY,gBAAgB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\r\n\r\nexport interface MediaFile {\r\n  /**\r\n   * The name of the file, without path information.\r\n   */\r\n  name: string;\r\n  /**\r\n   * The full path of the file, including the name.\r\n   */\r\n  fullPath: string;\r\n  /**\r\n   * The file's mime type\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * The date and time when the file was last modified.\r\n   */\r\n  lastModifiedDate: Date;\r\n\r\n  /**\r\n   * The size of the file, in bytes.\r\n   */\r\n  size: number;\r\n\r\n  /**\r\n   * Retrieves the format information of the media file.\r\n   * @param {Function} successCallback\r\n   * @param {Function} [errorCallback]\r\n   */\r\n  getFormatData(successCallback: (data: MediaFileData) => any, errorCallback?: (err: any) => any): any;\r\n}\r\n\r\nexport interface MediaFileData {\r\n  /**\r\n   * The actual format of the audio and video content.\r\n   */\r\n  codecs: string;\r\n  /**\r\n   * The average bitrate of the content. The value is zero for images.\r\n   */\r\n  bitrate: number;\r\n  /**\r\n   * The height of the image or video in pixels. The value is zero for audio clips.\r\n   */\r\n  height: number;\r\n  /**\r\n   * The width of the image or video in pixels. The value is zero for audio clips.\r\n   */\r\n  width: number;\r\n  /**\r\n   * The length of the video or sound clip in seconds. The value is zero for images.\r\n   */\r\n  duration: number;\r\n}\r\n\r\nexport interface VideoCapturePlusOptions {\r\n\r\n  /**\r\n  * The number of videos to record, default 1 (on iOS always 1)\r\n  */\r\n  limit?: number;\r\n\r\n  /**\r\n  * Max duration in seconds, default 0, which is 'forever'\r\n  */\r\n  duration?: number;\r\n\r\n  /**\r\n  * Set to true to override the default low quality setting\r\n  */\r\n  highquality?: boolean;\r\n\r\n  /**\r\n  * Set to true to override the default backfacing camera setting.\r\n  * You'll want to sniff the useragent/device and pass the best overlay based on that.. assuming iphone here\r\n  */\r\n  frontcamera?: boolean;\r\n\r\n  /**\r\n  * put the png overlay in your assets folder\r\n  */\r\n  portraitOverlay?: string;\r\n\r\n  /**\r\n  *  not passing an overlay means no image is shown for the landscape orientation\r\n  */\r\n  landscapeOverlay?: string;\r\n\r\n  /**\r\n  * iOS only\r\n  */\r\n  overlayText?: string;\r\n\r\n}\r\n\r\n/**\r\n * @beta\r\n * @name Video Capture Plus\r\n * @description\r\n * This plugin offers some useful extras on top of the default Media Capture Plugin capabilities:\r\n * - HD recording.\r\n * - Starting with the front camera.\r\n * - A custom overlay (currently iOS only).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { VideoCapturePlus, VideoCapturePlusOptions, MediaFile } from '@ionic-native/video-capture-plus';\r\n *\r\n *\r\n * constructor(private videoCapturePlus: VideoCapturePlus) { }\r\n *\r\n * ...\r\n *\r\n * const options: VideoCapturePlusOptions = {\r\n *    limit: 1,\r\n *    highquality: true,\r\n *    portraitOverlay: 'assets/img/camera/overlay/portrait.png',\r\n *    landscapeOverlay: 'assets/img/camera/overlay/landscape.png'\r\n * }\r\n *\r\n * this.videoCapturePlus.captureVideo(options).then(mediafile: MediaFile[] => console.log(mediafile), error => console.log('Something went wrong'));\r\n *\r\n * ```\r\n * @interfaces\r\n * MediaFile\r\n * MediaFileData\r\n * VideoCapturePlusOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'VideoCapturePlus',\r\n  plugin: 'cordova-plugin-video-capture-plus',\r\n  pluginRef: 'window.plugins.videocaptureplus',\r\n  repo: 'https://github.com/danielsogl/cordova-plugin-video-capture-plus',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class VideoCapturePlus extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Starts recordings\r\n   * @param [options] {VideoCapturePlusOptions} Configure options\r\n   * @return {Promise<MediaFile[]>}\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  captureVideo(options?: VideoCapturePlusOptions): Promise<MediaFile[]> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}